pipeline{
    agent any
    environment {
      DOCKER_PROD_HOST="tcp://45.155.170.65:2375"
      DOCKER_PRIVATE_REGISTER="registry.dsp-archiwebo21-ct-df-an-cd.fr"
      REGISTRY_CRED=credentials('jenkins-registry-credential')
      IMAGE_TAG=sh(returnStdout: true, script: 'cat infra/build/version | tail -1').trim()
    }

    stages{
          stage("Jenkins Flow"){
              parallel {
                  stage("CI/CD"){
                       stages{
                          stage("Build Docker Image") {
                             when { expression { BRANCH_NAME ==~ /(main|release)/ } }
                             stages {
                                stage("DB Docker Image"){     
                                    stages {
                                    stage("release"){  
                                            when {branch 'release'}
                                            steps {
                                                sh "infra/scripts/build.sh db release"
                                            }
                                        }

                                    stage("stable"){
                                        when{branch 'main'}
                                        steps{
                                            sh "infra/scripts/build.sh db stable"
                                        }
                                        }
                                
                                    }
                                }

                            stage("Api Docker Image") {
                                    stages {                               
                                        stage("release"){  
                                                when {branch 'release'}
                                                steps{sh "infra/scripts/build.sh api release"}
                                         }

                                        stage("stable"){
                                            when{branch 'main'}
                                            steps{sh "infra/scripts/build.sh api stable"} 
                                        }
                                    }
                                }
                             }
                          }

                            stage("Register Docker Image") {
                                    when { expression { BRANCH_NAME ==~ /(main|release)/ } }
                                    stages {
                                        stage("login"){ 
                                            steps{
                                                sh "docker login -u ${REGISTRY_CRED_USR} -p ${REGISTRY_CRED_PSW} https://${DOCKER_PRIVATE_REGISTER}"    
                                              }
                                         }
                      
                                        stage("Push Images To Registry"){
                                
                                           steps{
                                                 sh "infra/scripts/registry.sh db"
                                                 echo "push api image to the private registry"
                                                 sh "infra/scripts/registry.sh api"        
                                            }

                                             post {
                                                always {
                                                 sh "docker system prune -af"
                                                }
                                             }
                                          }
                             
                                       }
                            
                                     }

                            stage("Deploy Stage"){ 
                                stages{
                                    stage ('To Release'){
                                        when{ branch 'release'}
                                        steps{
                                            sshagent(credentials: ['devops-sshkey-private']) {
                                                echo "copy release infra folder env on prod remote"
                                                echo "Add execute permission to the start.sh file on remote"
                                                sh "infra/scripts/deploy.sh release"
                                            }
                                            
                                        }
                                    }

                                    stage('To Prod'){
                                        when { branch 'main' }
                                        steps {
                                            sshagent(credentials: ['devops-sshkey-private']) {
                                                echo "copy prod infra folder env on remote"
                                                echo "Add execute permission to start.sh file on remote"
                                                sh "infra/scripts/deploy.sh prod"
                                            }                          
                                        }
                                    }
                                }                 
                            }
                        }
                  }  

            stage("Testing"){
                    when {expression { BRANCH_NAME ==~ /(dev|feature)/ }}
                    environment {
                      SCANNER_HOME = tool 'SonarQubeScanner'
                      NODEJS_HOME = "${tool 'Node 16.18.1'}"
                      PATH="${env.NODEJS_HOME}/bin:${env.PATH}"    
                   }
                  
                     stages {
                        stage("Setup Test Env"){
                              steps{
                                 sh "node --version"
                                 sh "npm version"
                            }
                          }

                         stage("Install Packages") {
                                     steps{
                                         sh "yarn install"
                                        }
                                    }

                        stage("Audit && Fix Vulnerability") {
                                steps{
                                 // sh "npm audit fix --force"
                                 // sh "npm fund"
                                  echo "Fix Vulnerability"
                                 //  sh "npm audit report"
                                }
                            }
                                             
                        stage("Build Code"){
                                steps{
                                    sh "yarn run build"
                                   }
                            }
                
                    stage("Unit"){         
                              steps{
                                sh "yarn run test"
                              }
                           }
                  
                    stage("Coverage") {
                       steps{
                        sh "yarn run test:cov"
                        }
                      }
                   
                  stage("e2e"){
                     when {branch "dev"}
                     steps{
                        //sh "npm run test:e2e"
                        echo "Handle e2e testing" 
                     }
                  }

              stage("SonarQube Analysis"){              
                  steps{  
                     withSonarQubeEnv('SonarQube') {
                        sh "${SCANNER_HOME}/bin/sonar-scanner -X"
                     }
                 }
              }

              stage("Quality Gate"){              
                        steps{  
                          timeout(time: 1, unit: 'HOURS') {
                            // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                           // true = set pipeline to UNSTABLE, false = don't
                          waitForQualityGate abortPipeline: false
                        }
                     }
                }
               
            }
         }

      }
    }

        stage("end") {
                steps{echo "Successful end"}
          }
        }

         post{
             success{
                 echo "====++++only when successful++++===="
                 emailext body: 'A Test EMail', 
                 recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], 
                 subject: "${PROJECT_NAME} - Build # ${BUILD_NUMBER} - ${BUILD_STATUS}"
                 body: "${currentBuild.currentResult}: Job ${env.JOB_NAME}\nMore Info can be found here: ${env.BUILD_URL}"
              }
        
             failure{
                 echo "====++++only when successful++++===="
                 emailext body: 'A Test EMail', 
                 recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], 
                 subject: "${PROJECT_NAME} - Build # ${BUILD_NUMBER} - ${BUILD_STATUS}"
                 body: "${currentBuild.currentResult}: Job ${env.JOB_NAME}\nMore Info can be found here: ${env.BUILD_URL}"
             }
         } 
   }
